import random
import numpy as np
import pygame
import pickle
import time
import json

class Color:
    def __init__(self):
        self.white = (255, 255, 255)
        self.black = (0, 0, 0)
        self.neon_red = (255, 0, 0)
        self.cyan = (0, 255, 255)
        self.blue = (0, 0, 255)
        self.green = (0, 255, 0)
        self.beige = (245, 245, 220)
        self.dark_brown = (101, 67, 33)
        self.selected_brown = (139, 69, 19)
        self.tail_glow = (150, 75, 0)
        self.blink_red = (255, 69, 0)

def interpolate_color(color1, color2, t):
    """ Interpolate between two colors """
    return tuple(int(a + (b - a) * t) for a, b in zip(color1, color2))

class SnakeGame:
    def __init__(self, mode='ai'):
        self.show_episode = True
        self.episode = None
        self.scale = 2
        self.w = int(600 * self.scale)
        self.h = int(400 * self.scale)
        self.pad = int(30 * self.scale)
        self.sn_size = int(10 * self.scale)
        self.fd_size = int(10 * self.scale)
        self.spd = 20 if mode == 'manual' else 40  # Faster speed in AI mode
        self.sn_coords = [(self.h // self.sn_size // 2, self.w // self.sn_size // 2)]
        self.sn_len = 1
        self.dir = "right"
        self.board = np.zeros((self.h // self.sn_size, self.w // self.sn_size))
        self.game_close = False
        self.x = self.w / 2
        self.y = self.h / 2 + self.pad
        self.r, self.c = self.coord_to_idx(self.x, self.y)
        self.board[self.r][self.c] = 1
        self.col_chg = 1
        self.row_chg = 0
        self.fd_r, self.fd_c = self.mk_food()
        self.board[self.fd_r][self.fd_c] = 2
        self.surv = 0
        self.mode = mode
        self.menu_selection = 0
        self.player_name = ""
        self.latest_ai_score = 0
        self.replay_data = []
        pygame.init()
        self.color = Color()
        self.screen = pygame.display.set_mode((self.w, self.h + self.pad))
        pygame.display.set_caption("Serpentine")
        self.clock = pygame.time.Clock()
        self.font = pygame.font.SysFont("bahnschrift", int(18 * self.scale))
        self.last_dir = None

    def draw_snake(self):
        num_segments = len(self.sn_coords)
        for i in range(num_segments):
            row, col = self.sn_coords[i]
            x, y = self.idx_to_coord(row, col)
            t = i / (num_segments - 1) if num_segments > 1 else 0
            segment_color = interpolate_color(self.color.dark_brown, self.color.selected_brown, t)
            pygame.draw.rect(self.screen, segment_color, [x, y, self.sn_size, self.sn_size])

    def idx_to_coord(self, row, col):
        x = col * self.sn_size
        y = row * self.sn_size + self.pad
        return (x, y)

    def coord_to_idx(self, x, y):
        row = int((y - self.pad) // self.sn_size)
        col = int(x // self.sn_size)
        return (row, col)

    def mk_food(self):
        col = int(round(random.randrange(0, self.w - self.fd_size) / self.fd_size))
        row = int(round(random.randrange(0, self.h - self.fd_size) / self.fd_size))
        if self.board[row][col] != 0:
            row, col = self.mk_food()
        return row, col

    def step(self, action="None"):
        # Handling input and snake movement logic
        # This is shortened for brevity. Implement as in your original code.

    def run(self, ep):
        # Main game loop handling for AI and manual modes
        # This is shortened for brevity. Implement as in your original code.

    def play_replay(self):
        for step_index, step in enumerate(self.replay_data):
            sn_coords, fd_r, fd_c = step
            self.screen.fill(self.color.beige)
            pygame.draw.rect(self.screen, self.color.dark_brown, (0, self.pad, self.w, self.h), 1)
            fd_x, fd_y = self.idx_to_coord(fd_r, fd_c)
            pygame.draw.rect(self.screen, self.color.neon_red, [fd_x, fd_y, self.fd_size, self.fd_size])
            for i in range(len(sn_coords) - 1, -1, -1):
                row, col = sn_coords[i]
                x, y = self.idx_to_coord(row, col)
                pygame.draw.rect(self.screen, self.color.tail_glow, [x, y, self.sn_size, self.sn_size])
            if step_index % 10 < 5:  # Blinking effect
                pygame.draw.circle(self.screen, self.color.blink_red, (self.w // 2, 10), 10)  # Centered at the top
            pygame.display.update()
            self.clock.tick(self.spd * 7)  # 7x speed replay

    def reset_game(self):
        # Reset game to initial state
        # This is shortened for brevity. Implement as in your original code.

    def game_menu(self):
        # Main menu logic
        # This is shortened for brevity. Implement as in your original code.

if __name__ == "__main__":
    game = SnakeGame()
    game.game_menu()
